---
categories: leetcode
comments: true
img: https://qph.ec.quoracdn.net/main-qimg-f939681b0b47e5540398244db5c8966f?convert_to_webp=true
layout: programming_post
seo:
  description: Here is the solution for programming question jump-game on leetcode
  tags:
  - solution
  - source code
  - programming
  - leetcode
  - jump-game Solution
tags:
- competitive-programming
- programming
title: LEETCODE jump-game Solution
---
The correct, optimal and working solution for programming question jump-game on leetcode

<div class="ui secondary pointing large menu">
  <a class="grey item" data-tab="problem-statement">
    Problem Statement
  </a>
  <a class="active item grey" data-tab="solution">
    Solution
  </a>
</div>
<div class="ui bottom attached tab" data-tab="problem-statement">
    <iframe src="https://leetcode.com/problems/jump-game/" width="100%" height="600px" style="overflow: scroll; border: none;"></iframe>
</div>
<div class="ui bottom attached active tab" data-tab="solution">
{% highlight cpp %}

class Solution {
public:
    bool canJump(int A[], int n) {
        
        int count = 0;
        
        for( int i = 0 ; i < n-1 ; ) {
            
            int m = INT_MIN;
            int mi = i;
            int jumpsize = A[i];
            for( int j = 0 ; j < jumpsize; j++ ) {
                if( i + j + 1 < n-1 && i + j + 1 + A[i+j+1] > m ) {
                    m = i + j + 1 + A[i+j+1];
                    mi = i + j + 1;
                }
                
                if( i + j + 1 >= n-1 ) {
                    return true;
                }
            }
            
            if( m == INT_MIN ) {
                return false;
            }
            else {
                i = mi;
            }
            
        }
        
        return true;
        
    }
};

{% endhighlight %}
</div>
