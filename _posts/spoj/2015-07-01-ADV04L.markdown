---
categories: spoj
comments: true
img: https://qph.ec.quoracdn.net/main-qimg-f939681b0b47e5540398244db5c8966f?convert_to_webp=true
layout: programming_post
seo:
  description: Here is the solution for programming question ADV04L on spoj
  tags:
  - solution
  - source code
  - programming
  - spoj
  - ADV04L Solution
tags:
- competitive-programming
- programming
title: SPOJ ADV04L Solution
---
The correct, optimal and working solution for programming question ADV04L on spoj

<div class="ui secondary pointing large menu">
  <a class="grey item" data-tab="problem-statement">
    Problem Statement
  </a>
  <a class="active item grey" data-tab="solution">
    Solution
  </a>
</div>
<div class="ui bottom attached tab" data-tab="problem-statement">
    <iframe src="http://www.spoj.com/problems/ADV04L/" width="100%" height="600px" style="overflow: scroll; border: none;"></iframe>
</div>
<div class="ui bottom attached active tab" data-tab="solution">
{% highlight cpp %}

#include <iostream>
#include <vector>

using std::cin;
using std::cout;
using std::endl;
using std::vector;

class Converter
{
	public:
		void calculate(const long long limit);
		long long convert(long long miles) const;

	private:
		vector<long long> _fibonacci;
};

void Converter::calculate(const long long limit)
{
	vector<long long>::const_reverse_iterator iter;

	this->_fibonacci.clear();
	this->_fibonacci.push_back(1);
	this->_fibonacci.push_back(1);

	while (this->_fibonacci.back() <= limit)
	{
		iter = this->_fibonacci.rbegin();
		this->_fibonacci.push_back(*iter + *(iter + 1));
	}

}

long long Converter::convert(long long miles) const
{
	long long kilometers = 0;
	vector<long long>::const_reverse_iterator iter;

	for (iter = this->_fibonacci.rbegin(); iter != this->_fibonacci.rend();
	     iter++)
	{
		if (*iter <= miles)
		{
			miles -= *iter;
			kilometers += *(iter - 1); // Next in sequence
		}
	}

	return kilometers;
}


int main()
{
	Converter converter;
	converter.calculate(1000000000000000LL);

	int numCases;
	cin >> numCases;

	while (numCases--)
	{
		long long miles;
		cin >> miles;
		cout << converter.convert(miles) << endl;
	}

	return 0;
}


{% endhighlight %}
</div>
